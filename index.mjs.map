{"version":3,"file":"index.mjs","sources":["../lib/base.js","../lib/slaswp.js","../lib/main.js","../lib/ndarray.js","../lib/index.js","../67ca56c50f074ca5efa1baee6487f8"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major';\nimport floor from '@stdlib/math-base-special-floor';\nimport { ndarray as sswap } from '@stdlib/blas-base-sswap';\n\n\n// VARIABLES //\n\nvar BLOCK_SIZE = 32;\n\n\n// MAIN //\n\n/**\n* Performs a series of row interchanges on a matrix `A` using pivot indices stored in `IPIV`.\n*\n* @private\n* @param {PositiveInteger} N - number of columns in `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - index offset for `A`\n* @param {NonNegativeInteger} k1 - index of first row to interchange\n* @param {NonNegativeInteger} k2 - index of last row to interchange\n* @param {integer} inck - direction in which to apply pivots (-1 to apply pivots in reverse order; otherwise, apply in provided order)\n* @param {Int32Array} IPIV - vector of pivot indices\n* @param {integer} strideIPIV - `IPIV` stride length\n* @param {NonNegativeInteger} offsetIPIV - index offset for `IPIV`\n* @returns {Float32Array} permuted matrix `A`\n*\n* @example\n* import Int32Array from '@stdlib/array-int32';\n* import Float32Array from '@stdlib/array-float32';\n*\n* var IPIV = new Int32Array( [ 2, 0, 1 ] );\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] ); // => [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* slaswp( 2, A, 2, 1, 0, 0, 2, 1, IPIV, 1, 0 );\n* // A => <Float32Array>[ 3.0, 4.0, 1.0, 2.0, 5.0, 6.0 ]\n*/\nfunction slaswp( N, A, strideA1, strideA2, offsetA, k1, k2, inck, IPIV, strideIPIV, offsetIPIV ) { // eslint-disable-line max-len, max-params\n\tvar nrows;\n\tvar n32;\n\tvar tmp;\n\tvar row;\n\tvar ia1;\n\tvar ia2;\n\tvar ip;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar n;\n\tvar o;\n\n\t// Compute the number of rows to be interchanged:\n\tif ( inck > 0 ) {\n\t\tnrows = k2 - k1;\n\t} else {\n\t\tnrows = k1 - k2;\n\t}\n\tnrows += 1;\n\n\t// If the order is row-major, we can delegate to the Level 1 routine `sswap` for interchanging rows...\n\tif ( isRowMajor( [ strideA1, strideA2 ] ) ) {\n\t\tip = offsetIPIV;\n\t\tfor ( i = 0, k = k1; i < nrows; i++, k += inck ) {\n\t\t\trow = IPIV[ ip ];\n\t\t\tif ( row !== k ) {\n\t\t\t\tsswap( N, A, strideA2, offsetA+(k*strideA1), A, strideA2, offsetA+(row*strideA1) ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\tip += strideIPIV;\n\t\t}\n\t\treturn A;\n\t}\n\t// If the order is column-major, we need to use loop tiling to ensure efficient cache access when accessing matrix elements...\n\tn32 = floor( N/BLOCK_SIZE ) * BLOCK_SIZE;\n\tif ( n32 !== 0 ) {\n\t\tfor ( j = 0; j < n32; j += BLOCK_SIZE ) {\n\t\t\tip = offsetIPIV;\n\t\t\tfor ( i = 0, k = k1; i < nrows; i++, k += inck ) {\n\t\t\t\trow = IPIV[ ip ];\n\t\t\t\tif ( row !== k ) {\n\t\t\t\t\tia1 = offsetA + ( k*strideA1 );\n\t\t\t\t\tia2 = offsetA + ( row*strideA1 );\n\t\t\t\t\tfor ( n = j; n < j+BLOCK_SIZE; n++ ) {\n\t\t\t\t\t\to = n * strideA2;\n\t\t\t\t\t\ttmp = A[ ia1+o ];\n\t\t\t\t\t\tA[ ia1+o ] = A[ ia2+o ];\n\t\t\t\t\t\tA[ ia2+o ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tip += strideIPIV;\n\t\t\t}\n\t\t}\n\t}\n\tif ( n32 !== N ) {\n\t\tip = offsetIPIV;\n\t\tfor ( i = 0, k = k1; i < nrows; i++, k += inck ) {\n\t\t\trow = IPIV[ ip ];\n\t\t\tif ( row !== k ) {\n\t\t\t\tia1 = offsetA + ( k*strideA1 );\n\t\t\t\tia2 = offsetA + ( row*strideA1 );\n\t\t\t\tfor ( n = n32; n < N; n++ ) {\n\t\t\t\t\to = n * strideA2;\n\t\t\t\t\ttmp = A[ ia1+o ];\n\t\t\t\t\tA[ ia1+o ] = A[ ia2+o ];\n\t\t\t\t\tA[ ia2+o ] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t\tip += strideIPIV;\n\t\t}\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default slaswp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from '@stdlib/blas-base-assert-is-layout';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport isColumnMajor from '@stdlib/ndarray-base-assert-is-column-major-string';\nimport max from '@stdlib/math-base-special-max';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs a series of row interchanges on a matrix `A` using pivot indices stored in `IPIV`.\n*\n* @param {string} order - storage layout\n* @param {PositiveInteger} N - number of columns in `A`\n* @param {Float32Array} A - input matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {NonNegativeInteger} k1 - index of first row to interchange\n* @param {NonNegativeInteger} k2 - index of last row to interchange\n* @param {Int32Array} IPIV - vector of pivot indices\n* @param {integer} incx - increment between successive values of `IPIV`\n* @throws {TypeError} first argument must be a valid order\n* @throws {RangeError} fourth argument must be greater than or equal to max(1,N)\n* @returns {Float32Array} permuted matrix `A`\n*\n* @example\n* import Int32Array from '@stdlib/array-int32';\n* import Float32Array from '@stdlib/array-float32';\n*\n* var IPIV = new Int32Array( [ 2, 0, 1 ] );\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] ); // => [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* slaswp( 'row-major', 2, A, 2, 0, 2, IPIV, 1 );\n* // A => <Float32Array>[ 3.0, 4.0, 1.0, 2.0, 5.0, 6.0 ]\n*/\nfunction slaswp( order, N, A, LDA, k1, k2, IPIV, incx ) {\n\tvar tmp;\n\tvar inc;\n\tvar sa1;\n\tvar sa2;\n\tvar io;\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( isRowMajor( order ) && LDA < max( 1, N ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fourth argument must be greater than or equal to max(1,%d). Value: `%d`.', N, LDA ) );\n\t}\n\tif ( incx > 0 ) {\n\t\tinc = 1;\n\t\tio = k1;\n\t} else if ( incx < 0 ) {\n\t\tinc = -1;\n\t\tio = k1 + ( (k1-k2) * incx );\n\t\ttmp = k1;\n\t\tk1 = k2;\n\t\tk2 = tmp;\n\t} else {\n\t\treturn A;\n\t}\n\tif ( isColumnMajor( order ) ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\treturn base( N, A, sa1, sa2, 0, k1, k2, inc, IPIV, incx, io );\n}\n\n\n// EXPORTS //\n\nexport default slaswp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport slaswp from './slaswp.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( slaswp, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default slaswp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs a series of row interchanges on a matrix `A` using pivot indices stored in `IPIV`.\n*\n* @param {PositiveInteger} N - number of columns in `A`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - index offset for `A`\n* @param {NonNegativeInteger} k1 - index of first row to interchange\n* @param {NonNegativeInteger} k2 - index of last row to interchange\n* @param {integer} inck - direction in which to apply pivots (-1 to apply pivots in reverse order; otherwise, apply in provided order)\n* @param {Int32Array} IPIV - vector of pivot indices\n* @param {integer} strideIPIV - `IPIV` stride length\n* @param {NonNegativeInteger} offsetIPIV - index offset for `IPIV`\n* @returns {Float32Array} permuted matrix `A`\n*\n* @example\n* import Int32Array from '@stdlib/array-int32';\n* import Float32Array from '@stdlib/array-float32';\n*\n* var IPIV = new Int32Array( [ 2, 0, 1 ] );\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] ); // => [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* slaswp( 2, A, 2, 1, 0, 0, 2, 1, IPIV, 1, 0 );\n* // A => <Float32Array>[ 3.0, 4.0, 1.0, 2.0, 5.0, 6.0 ]\n*/\nfunction slaswp( N, A, strideA1, strideA2, offsetA, k1, k2, inck, IPIV, strideIPIV, offsetIPIV ) { // eslint-disable-line max-len, max-params\n\tvar tmp;\n\tif ( inck < 0 ) {\n\t\toffsetIPIV += k2 * strideIPIV;\n\t\tstrideIPIV *= -1;\n\t\ttmp = k1;\n\t\tk1 = k2;\n\t\tk2 = tmp;\n\t\tinck = -1;\n\t} else {\n\t\toffsetIPIV += k1 * strideIPIV;\n\t\tinck = 1;\n\t}\n\treturn base( N, A, strideA1, strideA2, offsetA, k1, k2, inck, IPIV, strideIPIV, offsetIPIV ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default slaswp;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK routine to perform a series of row interchanges on an input matrix.\n*\n* @module @stdlib/lapack-base-slaswp\n*\n* @example\n* import Int32Array from '@stdlib/array-int32';\n* import Float32Array from '@stdlib/array-float32';\n* import slaswp from '@stdlib/lapack-base-slaswp';\n*\n* var IPIV = new Int32Array( [ 2, 0, 1 ] );\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] ); // => [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* slaswp( 'row-major', 2, A, 2, 0, 2, IPIV, 1 );\n* // A => <Float32Array>[ 3.0, 4.0, 1.0, 2.0, 5.0, 6.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils-try-require';\nimport isError from '@stdlib/assert-is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar slaswp;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tslaswp = main;\n} else {\n\tslaswp = tmp;\n}\n\n\n// EXPORTS //\n\nexport default slaswp;\n","export default '/home/runner/work/lapack-base-slaswp/lapack-base-slaswp/lib'"],"names":["BLOCK_SIZE","slaswp","N","A","strideA1","strideA2","offsetA","k1","k2","inck","IPIV","strideIPIV","offsetIPIV","nrows","n32","tmp","row","ia1","ia2","ip","i","j","k","n","o","isRowMajor","sswap","floor","order","LDA","incx","inc","sa1","sa2","io","isLayout","TypeError","format","max","RangeError","isColumnMajor","base","setReadOnly","tryRequire","join","require$$0","slaswp$1","isError","main"],"mappings":"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"}